# Optimerad Dockerfile för produktion
# Använder multi-stage build för minimal storlek

# Stage 1: Dependencies
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Kopiera package filer
COPY package*.json ./
# Installera endast production dependencies
RUN npm ci --only=production

# Stage 2: Builder
FROM node:18-alpine AS builder
WORKDIR /app

# Kopiera dependencies från förra steget
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Bygg applikationen
ENV NODE_ENV production
RUN npm run build

# Stage 3: Runner
FROM nginx:stable-alpine AS runner

# Installera curl för healthcheck
RUN apk add --no-cache curl

# Kopiera nginx config
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Kopiera byggd app
COPY --from=builder /app/build /usr/share/nginx/html

# Skapa non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 && \
    chown -R nextjs:nodejs /usr/share/nginx/html && \
    chown -R nextjs:nodejs /var/cache/nginx && \
    chown -R nextjs:nodejs /var/log/nginx && \
    chown -R nextjs:nodejs /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nextjs:nodejs /var/run/nginx.pid

# Byt till non-root user
USER nextjs

# Exponera port 80
EXPOSE 80

# Healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

# Kör nginx
CMD ["nginx", "-g", "daemon off;"]
